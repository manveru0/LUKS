Modified by Manveru0, 2013

The repo has been modified in order to compile cryptsetup.static for Android JellyBean (tested on Android version 4.1.2).

libgpgerror has been updated to version 1.11
libgcrypt has been updated to verson 1.5.1
LVM2 has been updated to version 2.02.84 because there ain't no version 79 online (sources.redhat.com)
The repo as it is has been successfully compiled on Debian Sid
There are no guarantees that it might work on other systems (though it should).

Why such a project?

With the introduction of Android ICS on smartphones and Android Honeycomb on tablets, users are able to encrypt their phone: 
http://support.google.com/android/bin/answer.py?hl=en&answer=1663755
further informations and critics on how Google implemented disk encryption:
http://www.guyrutenberg.com/2012/06/29/some-thoughts-about-androids-full-disk-encryption/

Though the idea of encrypting your phone or at least the user relevant data parts is as good as important, Google implemented this in a not so usable way.
In order to encrypt your phone you have to set a password which serves as an unlock password for both your display and phone. Beside user provided 
security flaws this means you cannot encrypt your phone without having your display locked by the very same password you use during the boot phase to unlock your phone.

While there is a solution around on how to set two different passwords for unlocking the display and phone, there is none for just having your phone encrypted without
the "disadvantage" of having your display locked by a password as well (at least not known by the author). Guardianproject successfully tried to provide a solution for this problem.

There is an allready compiled cryptsetup and cryptsetup.static binary under /external/sbin/.

Credit and thanx to guardianproject

Below is the old README provided by guardianproject, slightly modified by Manveru0, 2013

Warning
**At this time, this software should be treated as beta software and used with caution.**
**Always do a backup of your system with a custom recovery. Once something went wrong or you forgot your**
**password, that's it! Due to the nature of encryption it is (almost) impossible to recover your data in such a case!**

While the LUKS project itself has been put through the paces on Linux desktops and servers, we are still determining the right conditions for its secure use on Android. 
With the many combinations of closed hardware, proprietary basebands, multitudes of kernels, firmwares and other mods, it is fairly impossible to guarantee security for any user.
That said, we feel this effort is a useful public step forward in providing an increased level of protection for file storage, and exploring the limits of what we can provide
as after-market software developers building open-source tools.

You should also review the FAQ for CryptSetup, as it is both enlightening and empowering. 
ATTENTION: If you are going to read just one thing, make it the section on Backup and Data Recovery. 
By far the most questions on the cryptsetup mailing list are from people that just managed to somehow format or overwrite the start of their LUKS partitions. 
In most cases, there is nothing that can be done to help these poor souls recover their data. Make sure you understand the problem and limitations imposed by the 
LUKS security model BEFORE you face such a disaster!

What is this?

LUKS is the standard for Linux hard disk encryption. By providing a standard on-disk-format, it does not only facilitate compatibility among distributions, but also
provides secure management of multiple user passwords. In contrast to existing solution, LUKS stores all necessary setup information in the partition header, 
enabling the user to transport or migrate his data seamlessly.

This project is the port of LUKS to Android. We have built upon work from the greater Android/XDA community, and updated the build process to provide a 
clean Makefile for use with the latest Android Native Development Kit.

Reference

    Linux Unified Key Setup: http://code.google.com/p/cryptsetup/

Credit and a big thanks to the original community hackers on this effort

    AndroidVoid: https://androidvoid.wordpress.com/2009/09/30/android-encryption-using-cryptsetup-and-luks/

    sigkill1337: http://forum.xda-developers.com/showthread.php?t=866131

    Another approach to Android data encryption is Whispercore for the Nexus-S: http://www.whispersys.com/whispercore.html. While it is closed-source, the developer(s) behind it do have a good reputation for trustworthy software.

Usage - Encrypted Mount

Example for creating a 50 megabyte "secretagentman.mp3" file on the sdcard to store our encrypted file system. The commands below can be issues via adb shell or terminal 
and require root permission.

First Time Setup

The "count=" variable below should create a 50MB file, but you might want to play around with the value on your system to see.

    dd if=/dev/zero of=/mnt/sdcard/secretagentman.mp3 bs=1048576 count=50
    mknod /dev/loop0 b 7 0
    losetup /dev/loop0 /mnt/sdcard/secretagentman.mp3
    ./cryptsetup luksFormat -c aes-plain /dev/loop0
    ./cryptsetup luksOpen /dev/loop0 secretagentman
    ./cryptsetup status secretagentman
    mke2fs -O uninit_bg,resize_inode,extent,dir_index -L DroidCrypt0 -FF /dev/mapper/secretagentman
    mkdir /mnt/sdcard/secretagentman
    mount /dev/mapper/secretagentman /mnt/sdcard/secretagentman

Mount Existing

    mknod /dev/loop0 b 7 0
    losetup /dev/loop0 /mnt/sdcard/secretagentman.mp3
    ./cryptsetup luksOpen /dev/loop0 secretagentman
    mount /dev/mapper/secretagentman /mnt/sdcard/secretagentman

To Unmount and close

    umount /mnt/sdcard/secretagentman
    ./cryptsetup luksClose secretagentman

To delete secured image

    First umount and close (see above)
    rm /mnt/sdcard/secretagentman.mp3

To access from Desktop

    Mount your SDCard via USB on your desktop machine
    Use a desktop version of cryptsetup, and follow the "Mount Existing" instructions from above, with step 2 updated to point to the desktop mount location of the "secretagentman.mp3"

Ways to improve security of file and mount directory

    Store the file and folder as hidden files: /mnt/sdcard/.temp.file and the mount point /mnt/sdcard/.temp
    Other ideas?